import { dequeueWork, WorkResult } from 'cache';
import { getXmlContent } from 'ecfr';
import { saveResult } from 'db';

async function runWorker() {
  while (true) {
    const item = await dequeueWork();
    if (!item) {
      console.log('No more work. Sleeping...');
      await new Promise((res) => setTimeout(res, 3000));
      continue;
    }

    try {
      let totalWordCount = 0;
      for (const part of item.parts) {
        console.log(
          `Processing: Date ${item.date} Title ${item.title}, Part ${part}`
        );
        const xml = await getXmlContent(
          item.date,
          item.title,
          item.chapter,
          part
        );

        const wordCount = countWords(xml);
        totalWordCount += wordCount;

        console.log(
          `Completed: Date ${item.date} Title ${item.title}, Part ${part}, Agency ${item.agency} Words: ${wordCount}`
        );
      }
      console.log(
        `Completed: Date ${item.date} Title ${item.title}, Agency ${item.agency} Total Word Count: ${totalWordCount}`
      );
      // now we have the total word count for a given agency from all the parts of the chapter on a given date, store the result
      const result: WorkResult = {
        date: item.date,
        title: item.title,
        agency: item.agency,
        word_count: totalWordCount,
      };
      await saveResult(result);
    } catch (err) {
      console.error('Failed to process work item:', item, err);
    }
  }
}

function countWords(xml: string): number {
  const text = xml.replace(/<[^>]+>/g, ' ');
  return text.split(/\s+/).filter(Boolean).length;
}

runWorker().catch((err) => {
  console.error('Worker failed:', err);
  process.exit(1);
});
